{"alias": "klassifikatsija_teksta_conv1d_lstm_w2v_bolshaja", "name": "\u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 Conv1d LSTM w2v \u0431\u043e\u043b\u044c\u0448\u0430\u044f", "image": "", "layers": [{"id": 1, "name": "\u0412\u0445\u043e\u0434 1", "type": "Input", "group": "input", "bind": {"up": [null], "down": [4]}, "shape": {"input": [[100, 200]], "output": [[100, 200]]}, "task": null, "num_classes": null, "position": [0, -320], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 2, "name": "\u0412\u044b\u0445\u043e\u0434  2", "type": "Dense", "group": "output", "bind": {"up": [10], "down": []}, "shape": {"input": [[1000]], "output": [[10]]}, "task": null, "num_classes": null, "position": [-4, 353], "parameters": {"main": {"units": 10, "activation": "softmax"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 4, "name": "Layer 2", "type": "LSTM", "group": "middle", "bind": {"up": [1], "down": [11]}, "shape": {"input": [[100, 200]], "output": [[100, 32]]}, "task": null, "num_classes": null, "position": [-1, -245], "parameters": {"main": {"units": 32, "return_sequences": true, "return_state": false}, "extra": {"activation": "tanh", "recurrent_activation": "sigmoid", "use_bias": true, "kernel_initializer": "glorot_uniform", "recurrent_initializer": "orthogonal", "bias_initializer": "zeros", "unit_forget_bias": true, "kernel_regularizer": null, "recurrent_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "recurrent_constraint": null, "bias_constraint": null, "dropout": 0.0, "recurrent_dropout": 0.0, "go_backwards": false, "stateful": false, "time_major": false, "unroll": false}}, "reference": null}, {"id": 6, "name": "Layer 4", "type": "Conv1D", "group": "middle", "bind": {"up": [11], "down": [12]}, "shape": {"input": [[100, 32]], "output": [[100, 32]]}, "task": null, "num_classes": null, "position": [-3, -98], "parameters": {"main": {"filters": 32, "kernel_size": 4, "strides": 1, "padding": "same", "activation": "relu"}, "extra": {"data_format": "channels_last", "dilation_rate": 1, "groups": 1, "use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 7, "name": "Layer 6", "type": "Dropout", "group": "middle", "bind": {"up": [12], "down": [8]}, "shape": {"input": [[100, 32]], "output": [[100, 32]]}, "task": null, "num_classes": null, "position": [-4, 53], "parameters": {"main": {"rate": 0.2}, "extra": {"noise_shape": null, "seed": null}}, "reference": null}, {"id": 8, "name": "Layer 7", "type": "Flatten", "group": "middle", "bind": {"up": [7], "down": [9]}, "shape": {"input": [[100, 32]], "output": [[3200]]}, "task": null, "num_classes": null, "position": [-3, 125], "parameters": {"main": {}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 9, "name": "Layer 8", "type": "Dense", "group": "middle", "bind": {"up": [8], "down": [10]}, "shape": {"input": [[3200]], "output": [[1000]]}, "task": null, "num_classes": null, "position": [-4, 201], "parameters": {"main": {"units": 1000, "activation": "relu"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 10, "name": "Layer 9", "type": "Dropout", "group": "middle", "bind": {"up": [9], "down": [2]}, "shape": {"input": [[1000]], "output": [[1000]]}, "task": null, "num_classes": null, "position": [-3, 277], "parameters": {"main": {"rate": 0.2}, "extra": {"noise_shape": null, "seed": null}}, "reference": null}, {"id": 11, "name": "Layer 3", "type": "BatchNormalization", "group": "middle", "bind": {"up": [4], "down": [6]}, "shape": {"input": [[100, 32]], "output": [[100, 32]]}, "task": null, "num_classes": null, "position": [-2, -172], "parameters": {"main": {}, "extra": {"axis": -1, "momentum": 0.99, "epsilon": 0.001, "center": true, "scale": true, "beta_initializer": "zeros", "gamma_initializer": "ones", "moving_mean_initializer": "zeros", "moving_variance_initializer": "ones", "beta_regularizer": null, "gamma_regularizer": null, "beta_constraint": null, "gamma_constraint": null}}, "reference": null}, {"id": 12, "name": "Layer 5", "type": "BatchNormalization", "group": "middle", "bind": {"up": [6], "down": [7]}, "shape": {"input": [[100, 32]], "output": [[100, 32]]}, "task": null, "num_classes": null, "position": [-3, -22], "parameters": {"main": {}, "extra": {"axis": -1, "momentum": 0.99, "epsilon": 0.001, "center": true, "scale": true, "beta_initializer": "zeros", "gamma_initializer": "ones", "moving_mean_initializer": "zeros", "moving_variance_initializer": "ones", "beta_regularizer": null, "gamma_regularizer": null, "beta_constraint": null, "gamma_constraint": null}}, "reference": null}], "keras": "from tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import BatchNormalization\nfrom tensorflow.keras.layers import Conv1D\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Model\n\ninput_1 = Input(shape=(100, 200), name='1')\nx_4 = LSTM(units=32, return_sequences=True, return_state=False, activation='tanh', recurrent_activation='sigmoid', use_bias=True, kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', unit_forget_bias=True, kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, go_backwards=False, stateful=False, time_major=False, unroll=False, name='LSTM_4')(input_1)\nx_11 = BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True, beta_initializer='zeros', gamma_initializer='ones', moving_mean_initializer='zeros', moving_variance_initializer='ones', beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None, name='BatchNormalization_11')(x_4)\nx_6 = Conv1D(filters=32, kernel_size=4, strides=1, padding='same', activation='relu', data_format='channels_last', dilation_rate=1, groups=1, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Conv1D_6')(x_11)\nx_12 = BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True, beta_initializer='zeros', gamma_initializer='ones', moving_mean_initializer='zeros', moving_variance_initializer='ones', beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None, name='BatchNormalization_12')(x_6)\nx_7 = Dropout(rate=0.2, noise_shape=None, seed=None, name='Dropout_7')(x_12)\nx_8 = Flatten(data_format='channels_last', name='Flatten_8')(x_7)\nx_9 = Dense(units=1000, activation='relu', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Dense_9')(x_8)\nx_10 = Dropout(rate=0.2, noise_shape=None, seed=None, name='Dropout_10')(x_9)\noutput_2 = Dense(units=10, activation='softmax', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='2')(x_10)\n\nmodel = Model([input_1], [output_2])", "references": [], "input_shape": "[(100, 200)]"}