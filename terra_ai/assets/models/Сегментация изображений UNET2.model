{"alias": "unet2", "name": "UNET2", "image": "", "layers": [{"id": 1, "name": "\u0412\u0445\u043e\u0434 1", "type": "Input", "group": "input", "bind": {"up": [null], "down": [3]}, "shape": {"input": [[120, 120, 3]], "output": [[120, 120, 3]]}, "task": null, "num_classes": null, "position": [-227, -270], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 2, "name": "\u0412\u044b\u0445\u043e\u0434  2", "type": "Conv2D", "group": "output", "bind": {"up": [138], "down": []}, "shape": {"input": [[120, 120, 128]], "output": [[120, 120, 32]]}, "task": null, "num_classes": null, "position": [3130, 1418], "parameters": {"main": {"filters": 32, "kernel_size": [3, 3], "strides": [1, 1], "padding": "same", "activation": "sigmoid"}, "extra": {"data_format": "channels_last", "dilation_rate": [1, 1], "groups": 1, "use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 3, "name": "Layer 3", "type": "CONVBlock", "group": "middle", "bind": {"up": [1], "down": [4, 25]}, "shape": {"input": [[120, 120, 3]], "output": [[120, 120, 16]]}, "task": null, "num_classes": null, "position": [-488, -64], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 4, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [3], "down": [5, 21]}, "shape": {"input": [[120, 120, 16]], "output": [[120, 120, 16]]}, "task": null, "num_classes": null, "position": [-488, -3], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 5, "name": "Layer 5", "type": "MaxPool2D", "group": "middle", "bind": {"up": [4], "down": [6]}, "shape": {"input": [[120, 120, 16]], "output": [[60, 60, 16]]}, "task": null, "num_classes": null, "position": [-487, 57], "parameters": {"main": {"pool_size": [2, 2], "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 6, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [5], "down": [7, 18]}, "shape": {"input": [[60, 60, 16]], "output": [[60, 60, 16]]}, "task": null, "num_classes": null, "position": [-488, 116], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 7, "name": "Layer 5 (Clone)", "type": "MaxPool2D", "group": "middle", "bind": {"up": [6], "down": [9]}, "shape": {"input": [[60, 60, 16]], "output": [[30, 30, 16]]}, "task": null, "num_classes": null, "position": [-488, 174], "parameters": {"main": {"pool_size": [2, 2], "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 8, "name": "Layer 5 (Clone)", "type": "MaxPool2D", "group": "middle", "bind": {"up": [9], "down": [10]}, "shape": {"input": [[30, 30, 16]], "output": [[15, 15, 16]]}, "task": null, "num_classes": null, "position": [-488, 293], "parameters": {"main": {"pool_size": [2, 2], "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 9, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [7], "down": [8, 16]}, "shape": {"input": [[30, 30, 16]], "output": [[30, 30, 16]]}, "task": null, "num_classes": null, "position": [-489, 234], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 10, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [8], "down": [11, 15]}, "shape": {"input": [[15, 15, 16]], "output": [[15, 15, 16]]}, "task": null, "num_classes": null, "position": [-484, 354], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 11, "name": "Layer 11", "type": "CONVBlock", "group": "middle", "bind": {"up": [10], "down": [12]}, "shape": {"input": [[15, 15, 16]], "output": [[15, 15, 16]]}, "task": null, "num_classes": null, "position": [-347, 422], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [2, 2], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 12, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [11], "down": [15]}, "shape": {"input": [[15, 15, 16]], "output": [[15, 15, 16]]}, "task": null, "num_classes": null, "position": [-207, 359], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 13, "name": "Layer 13", "type": "UpSampling2D", "group": "middle", "bind": {"up": [15], "down": [14]}, "shape": {"input": [[15, 15, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [-113, 239], "parameters": {"main": {"size": [2, 2]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 14, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [13], "down": [16]}, "shape": {"input": [[30, 30, 32]], "output": [[30, 30, 16]]}, "task": null, "num_classes": null, "position": [-73, 180], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 15, "name": "Layer 15", "type": "Concatenate", "group": "middle", "bind": {"up": [10, 12], "down": [13]}, "shape": {"input": [[15, 15, 16], [15, 15, 16]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [-159, 299], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 16, "name": "Layer 15 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [9, 14], "down": [17]}, "shape": {"input": [[30, 30, 16], [30, 30, 16]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [-38, 122], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 17, "name": "Layer 13 (Clone)", "type": "UpSampling2D", "group": "middle", "bind": {"up": [16], "down": [19]}, "shape": {"input": [[30, 30, 32]], "output": [[60, 60, 32]]}, "task": null, "num_classes": null, "position": [-1, 66], "parameters": {"main": {"size": [2, 2]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 18, "name": "Layer 15 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [6, 19], "down": [20]}, "shape": {"input": [[60, 60, 16], [60, 60, 16]], "output": [[60, 60, 32]]}, "task": null, "num_classes": null, "position": [50, -37], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 19, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [17], "down": [18]}, "shape": {"input": [[60, 60, 32]], "output": [[60, 60, 16]]}, "task": null, "num_classes": null, "position": [27, 15], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 20, "name": "Layer 13 (Clone)", "type": "UpSampling2D", "group": "middle", "bind": {"up": [18], "down": [22]}, "shape": {"input": [[60, 60, 32]], "output": [[120, 120, 32]]}, "task": null, "num_classes": null, "position": [84, -90], "parameters": {"main": {"size": [2, 2]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 21, "name": "Layer 15 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [4, 22], "down": [24]}, "shape": {"input": [[120, 120, 16], [120, 120, 16]], "output": [[120, 120, 32]]}, "task": null, "num_classes": null, "position": [126, -198], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 22, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [20], "down": [21]}, "shape": {"input": [[120, 120, 32]], "output": [[120, 120, 16]]}, "task": null, "num_classes": null, "position": [106, -145], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 24, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [21], "down": [25]}, "shape": {"input": [[120, 120, 32]], "output": [[120, 120, 16]]}, "task": null, "num_classes": null, "position": [149, -250], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 25, "name": "Layer 25", "type": "Add", "group": "middle", "bind": {"up": [3, 24], "down": [42, 129]}, "shape": {"input": [[120, 120, 16], [120, 120, 16]], "output": [[120, 120, 16]]}, "task": null, "num_classes": null, "position": [197, -301], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 26, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [42], "down": [27, 41]}, "shape": {"input": [[60, 60, 16]], "output": [[60, 60, 32]]}, "task": null, "num_classes": null, "position": [-23, 518], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 27, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [26], "down": [28, 39]}, "shape": {"input": [[60, 60, 32]], "output": [[60, 60, 32]]}, "task": null, "num_classes": null, "position": [-23, 582], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 28, "name": "Layer 28", "type": "MaxPool2D", "group": "middle", "bind": {"up": [27], "down": [29]}, "shape": {"input": [[60, 60, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [-23, 641], "parameters": {"main": {"pool_size": [2, 2], "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 29, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [28], "down": [30, 37]}, "shape": {"input": [[30, 30, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [-23, 698], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 30, "name": "Layer 28 (Clone)", "type": "MaxPool2D", "group": "middle", "bind": {"up": [29], "down": [31]}, "shape": {"input": [[30, 30, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [-23, 756], "parameters": {"main": {"pool_size": [2, 2], "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 31, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [30], "down": [32, 34]}, "shape": {"input": [[15, 15, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [-22, 812], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 32, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [31], "down": [33]}, "shape": {"input": [[15, 15, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [88, 876], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [2, 2], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 33, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [32], "down": [34]}, "shape": {"input": [[15, 15, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [232, 818], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 34, "name": "Layer 34", "type": "Concatenate", "group": "middle", "bind": {"up": [31, 33], "down": [35]}, "shape": {"input": [[15, 15, 32], [15, 15, 32]], "output": [[15, 15, 64]]}, "task": null, "num_classes": null, "position": [276, 760], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 35, "name": "Layer 35", "type": "UpSampling2D", "group": "middle", "bind": {"up": [34], "down": [36]}, "shape": {"input": [[15, 15, 64]], "output": [[30, 30, 64]]}, "task": null, "num_classes": null, "position": [312, 701], "parameters": {"main": {"size": [2, 2]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 36, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [35], "down": [37]}, "shape": {"input": [[30, 30, 64]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [347, 643], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 37, "name": "Layer 34 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [29, 36], "down": [38]}, "shape": {"input": [[30, 30, 32], [30, 30, 32]], "output": [[30, 30, 64]]}, "task": null, "num_classes": null, "position": [380, 589], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 38, "name": "Layer 35 (Clone)", "type": "UpSampling2D", "group": "middle", "bind": {"up": [37], "down": [40]}, "shape": {"input": [[30, 30, 64]], "output": [[60, 60, 64]]}, "task": null, "num_classes": null, "position": [407, 534], "parameters": {"main": {"size": [2, 2]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 39, "name": "Layer 34 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [27, 40], "down": [57]}, "shape": {"input": [[60, 60, 32], [60, 60, 32]], "output": [[60, 60, 64]]}, "task": null, "num_classes": null, "position": [474, 428], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 40, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [38], "down": [39]}, "shape": {"input": [[60, 60, 64]], "output": [[60, 60, 32]]}, "task": null, "num_classes": null, "position": [444, 479], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 41, "name": "Layer 41", "type": "Add", "group": "middle", "bind": {"up": [26, 57], "down": [43, 88]}, "shape": {"input": [[60, 60, 32], [60, 60, 32]], "output": [[60, 60, 32]]}, "task": null, "num_classes": null, "position": [554, 323], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 42, "name": "Layer 42", "type": "MaxPool2D", "group": "middle", "bind": {"up": [25], "down": [26]}, "shape": {"input": [[120, 120, 16]], "output": [[60, 60, 16]]}, "task": null, "num_classes": null, "position": [214, 334], "parameters": {"main": {"pool_size": [2, 2], "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 43, "name": "Layer 42 (Clone)", "type": "MaxPool2D", "group": "middle", "bind": {"up": [41], "down": [44]}, "shape": {"input": [[60, 60, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [432, 970], "parameters": {"main": {"pool_size": [2, 2], "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 44, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [43], "down": [45, 56]}, "shape": {"input": [[30, 30, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [240, 1171], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 45, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [44], "down": [46, 54]}, "shape": {"input": [[30, 30, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [239, 1231], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 46, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [45], "down": [47, 52]}, "shape": {"input": [[30, 30, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [239, 1294], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [2, 2], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 47, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [46], "down": [48, 50]}, "shape": {"input": [[30, 30, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [238, 1355], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [4, 4], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 48, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [47], "down": [49]}, "shape": {"input": [[30, 30, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [351, 1423], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [8, 8], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 49, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [48], "down": [50]}, "shape": {"input": [[30, 30, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [490, 1363], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [4, 4], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 50, "name": "Layer 50", "type": "Concatenate", "group": "middle", "bind": {"up": [47, 49], "down": [51]}, "shape": {"input": [[30, 30, 32], [30, 30, 32]], "output": [[30, 30, 64]]}, "task": null, "num_classes": null, "position": [531, 1309], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 51, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [50], "down": [52]}, "shape": {"input": [[30, 30, 64]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [562, 1254], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [2, 2], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 52, "name": "Layer 50 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [46, 51], "down": [53]}, "shape": {"input": [[30, 30, 32], [30, 30, 32]], "output": [[30, 30, 64]]}, "task": null, "num_classes": null, "position": [594, 1200], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 53, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [52], "down": [54]}, "shape": {"input": [[30, 30, 64]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [621, 1146], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 54, "name": "Layer 50 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [45, 53], "down": [55]}, "shape": {"input": [[30, 30, 32], [30, 30, 32]], "output": [[30, 30, 64]]}, "task": null, "num_classes": null, "position": [655, 1090], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 55, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [54], "down": [56]}, "shape": {"input": [[30, 30, 64]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [688, 1037], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 56, "name": "Layer 56", "type": "Add", "group": "middle", "bind": {"up": [44, 55], "down": [71, 73]}, "shape": {"input": [[30, 30, 32], [30, 30, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [712, 985], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 57, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [39], "down": [41]}, "shape": {"input": [[60, 60, 64]], "output": [[60, 60, 32]]}, "task": null, "num_classes": null, "position": [510, 374], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 58, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [71], "down": [59, 70]}, "shape": {"input": [[15, 15, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [753, 1530], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 59, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [58], "down": [60, 68]}, "shape": {"input": [[15, 15, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [752, 1594], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 60, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [59], "down": [61, 66]}, "shape": {"input": [[15, 15, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [752, 1656], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [2, 2], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 61, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [60], "down": [62, 64]}, "shape": {"input": [[15, 15, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [753, 1720], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [4, 4], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 62, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [61], "down": [63]}, "shape": {"input": [[15, 15, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [864, 1796], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [8, 8], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 63, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [62], "down": [64]}, "shape": {"input": [[15, 15, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [987, 1723], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [4, 4], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 64, "name": "Layer 50 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [61, 63], "down": [65]}, "shape": {"input": [[15, 15, 32], [15, 15, 32]], "output": [[15, 15, 64]]}, "task": null, "num_classes": null, "position": [1026, 1666], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 65, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [64], "down": [66]}, "shape": {"input": [[15, 15, 64]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [1069, 1609], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [2, 2], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 66, "name": "Layer 50 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [60, 65], "down": [67]}, "shape": {"input": [[15, 15, 32], [15, 15, 32]], "output": [[15, 15, 64]]}, "task": null, "num_classes": null, "position": [1102, 1551], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 67, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [66], "down": [68]}, "shape": {"input": [[15, 15, 64]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [1133, 1493], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 68, "name": "Layer 50 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [59, 67], "down": [69]}, "shape": {"input": [[15, 15, 32], [15, 15, 32]], "output": [[15, 15, 64]]}, "task": null, "num_classes": null, "position": [1166, 1436], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 69, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [68], "down": [70]}, "shape": {"input": [[15, 15, 64]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [1198, 1381], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 70, "name": "Layer 56 (Clone)", "type": "Add", "group": "middle", "bind": {"up": [58, 69], "down": [72, 130]}, "shape": {"input": [[15, 15, 32], [15, 15, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [1239, 1326], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 71, "name": "Layer 42 (Clone)", "type": "MaxPool2D", "group": "middle", "bind": {"up": [56], "down": [58]}, "shape": {"input": [[30, 30, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [945, 1298], "parameters": {"main": {"pool_size": [2, 2], "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 72, "name": "Layer 72", "type": "UpSampling2D", "group": "middle", "bind": {"up": [70], "down": [73]}, "shape": {"input": [[15, 15, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [1891, 917], "parameters": {"main": {"size": [2, 2]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 73, "name": "Layer 73", "type": "Concatenate", "group": "middle", "bind": {"up": [56, 72], "down": [74]}, "shape": {"input": [[30, 30, 32], [30, 30, 32]], "output": [[30, 30, 64]]}, "task": null, "num_classes": null, "position": [1890, 972], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 74, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [73], "down": [75, 86]}, "shape": {"input": [[30, 30, 64]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [1624, 1159], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 75, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [74], "down": [76, 84]}, "shape": {"input": [[30, 30, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [1626, 1216], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 76, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [75], "down": [77, 82]}, "shape": {"input": [[30, 30, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [1627, 1272], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [2, 2], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 77, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [76], "down": [78, 80]}, "shape": {"input": [[30, 30, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [1625, 1331], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [4, 4], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 78, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [77], "down": [79]}, "shape": {"input": [[30, 30, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [1746, 1400], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [8, 8], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 79, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [78], "down": [80]}, "shape": {"input": [[30, 30, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [1878, 1343], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [4, 4], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 80, "name": "Layer 50 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [77, 79], "down": [81]}, "shape": {"input": [[30, 30, 32], [30, 30, 32]], "output": [[30, 30, 64]]}, "task": null, "num_classes": null, "position": [1915, 1291], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 81, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [80], "down": [82]}, "shape": {"input": [[30, 30, 64]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [1952, 1241], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [2, 2], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 82, "name": "Layer 50 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [76, 81], "down": [83]}, "shape": {"input": [[30, 30, 32], [30, 30, 32]], "output": [[30, 30, 64]]}, "task": null, "num_classes": null, "position": [1988, 1189], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 83, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [82], "down": [84]}, "shape": {"input": [[30, 30, 64]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [2034, 1137], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 84, "name": "Layer 50 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [75, 83], "down": [85]}, "shape": {"input": [[30, 30, 32], [30, 30, 32]], "output": [[30, 30, 64]]}, "task": null, "num_classes": null, "position": [2074, 1087], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 85, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [84], "down": [86]}, "shape": {"input": [[30, 30, 64]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [2109, 1036], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 86, "name": "Layer 56 (Clone)", "type": "Add", "group": "middle", "bind": {"up": [74, 85], "down": [87, 132]}, "shape": {"input": [[30, 30, 32], [30, 30, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [2145, 987], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 87, "name": "Layer 72 (Clone)", "type": "UpSampling2D", "group": "middle", "bind": {"up": [86], "down": [88]}, "shape": {"input": [[30, 30, 32]], "output": [[60, 60, 32]]}, "task": null, "num_classes": null, "position": [2582, 291], "parameters": {"main": {"size": [2, 2]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 88, "name": "Layer 73 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [41, 87], "down": [89]}, "shape": {"input": [[60, 60, 32], [60, 60, 32]], "output": [[60, 60, 64]]}, "task": null, "num_classes": null, "position": [2582, 358], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 89, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [88], "down": [90, 105]}, "shape": {"input": [[60, 60, 64]], "output": [[60, 60, 32]]}, "task": null, "num_classes": null, "position": [2307, 542], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 90, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [89], "down": [91, 103]}, "shape": {"input": [[60, 60, 32]], "output": [[60, 60, 32]]}, "task": null, "num_classes": null, "position": [2307, 607], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 91, "name": "Layer 28 (Clone)", "type": "MaxPool2D", "group": "middle", "bind": {"up": [90], "down": [92]}, "shape": {"input": [[60, 60, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [2306, 669], "parameters": {"main": {"pool_size": [2, 2], "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 92, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [91], "down": [93, 100]}, "shape": {"input": [[30, 30, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [2305, 732], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 93, "name": "Layer 28 (Clone)", "type": "MaxPool2D", "group": "middle", "bind": {"up": [92], "down": [94]}, "shape": {"input": [[30, 30, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [2305, 792], "parameters": {"main": {"pool_size": [2, 2], "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 94, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [93], "down": [95, 97]}, "shape": {"input": [[15, 15, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [2304, 850], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 95, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [94], "down": [96]}, "shape": {"input": [[15, 15, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [2457, 921], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [2, 2], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 96, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [95], "down": [97]}, "shape": {"input": [[15, 15, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [2577, 859], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 97, "name": "Layer 34 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [94, 96], "down": [98]}, "shape": {"input": [[15, 15, 32], [15, 15, 32]], "output": [[15, 15, 64]]}, "task": null, "num_classes": null, "position": [2615, 803], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 98, "name": "Layer 35 (Clone)", "type": "UpSampling2D", "group": "middle", "bind": {"up": [97], "down": [99]}, "shape": {"input": [[15, 15, 64]], "output": [[30, 30, 64]]}, "task": null, "num_classes": null, "position": [2649, 746], "parameters": {"main": {"size": [2, 2]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 99, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [98], "down": [100]}, "shape": {"input": [[30, 30, 64]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [2684, 693], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 100, "name": "Layer 34 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [92, 99], "down": [101]}, "shape": {"input": [[30, 30, 32], [30, 30, 32]], "output": [[30, 30, 64]]}, "task": null, "num_classes": null, "position": [2722, 635], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 101, "name": "Layer 35 (Clone)", "type": "UpSampling2D", "group": "middle", "bind": {"up": [100], "down": [102]}, "shape": {"input": [[30, 30, 64]], "output": [[60, 60, 64]]}, "task": null, "num_classes": null, "position": [2755, 579], "parameters": {"main": {"size": [2, 2]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 102, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [101], "down": [103]}, "shape": {"input": [[60, 60, 64]], "output": [[60, 60, 32]]}, "task": null, "num_classes": null, "position": [2783, 521], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 103, "name": "Layer 34 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [90, 102], "down": [104]}, "shape": {"input": [[60, 60, 32], [60, 60, 32]], "output": [[60, 60, 64]]}, "task": null, "num_classes": null, "position": [2820, 464], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 104, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [103], "down": [105]}, "shape": {"input": [[60, 60, 64]], "output": [[60, 60, 32]]}, "task": null, "num_classes": null, "position": [2855, 409], "parameters": {"main": {"n_conv_layers": 1, "filters": 32, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 105, "name": "Layer 41 (Clone)", "type": "Add", "group": "middle", "bind": {"up": [89, 104], "down": [128, 134]}, "shape": {"input": [[60, 60, 32], [60, 60, 32]], "output": [[60, 60, 32]]}, "task": null, "num_classes": null, "position": [2889, 352], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 106, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [129], "down": [107, 127]}, "shape": {"input": [[120, 120, 48]], "output": [[120, 120, 16]]}, "task": null, "num_classes": null, "position": [3103, -131], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 107, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [106], "down": [108, 125]}, "shape": {"input": [[120, 120, 16]], "output": [[120, 120, 16]]}, "task": null, "num_classes": null, "position": [3104, -75], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 108, "name": "Layer 5 (Clone)", "type": "MaxPool2D", "group": "middle", "bind": {"up": [107], "down": [109]}, "shape": {"input": [[120, 120, 16]], "output": [[60, 60, 16]]}, "task": null, "num_classes": null, "position": [3105, -16], "parameters": {"main": {"pool_size": [2, 2], "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 109, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [108], "down": [110, 122]}, "shape": {"input": [[60, 60, 16]], "output": [[60, 60, 16]]}, "task": null, "num_classes": null, "position": [3104, 41], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 110, "name": "Layer 5 (Clone)", "type": "MaxPool2D", "group": "middle", "bind": {"up": [109], "down": [111]}, "shape": {"input": [[60, 60, 16]], "output": [[30, 30, 16]]}, "task": null, "num_classes": null, "position": [3104, 101], "parameters": {"main": {"pool_size": [2, 2], "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 111, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [110], "down": [112, 119]}, "shape": {"input": [[30, 30, 16]], "output": [[30, 30, 16]]}, "task": null, "num_classes": null, "position": [3106, 159], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 112, "name": "Layer 5 (Clone)", "type": "MaxPool2D", "group": "middle", "bind": {"up": [111], "down": [113]}, "shape": {"input": [[30, 30, 16]], "output": [[15, 15, 16]]}, "task": null, "num_classes": null, "position": [3108, 220], "parameters": {"main": {"pool_size": [2, 2], "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 113, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [112], "down": [114, 116]}, "shape": {"input": [[15, 15, 16]], "output": [[15, 15, 16]]}, "task": null, "num_classes": null, "position": [3107, 281], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 114, "name": "Layer 11 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [113], "down": [115]}, "shape": {"input": [[15, 15, 16]], "output": [[15, 15, 16]]}, "task": null, "num_classes": null, "position": [3243, 355], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [2, 2], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 115, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [114], "down": [116]}, "shape": {"input": [[15, 15, 16]], "output": [[15, 15, 16]]}, "task": null, "num_classes": null, "position": [3378, 299], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 116, "name": "Layer 15 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [113, 115], "down": [117]}, "shape": {"input": [[15, 15, 16], [15, 15, 16]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [3428, 241], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 117, "name": "Layer 13 (Clone)", "type": "UpSampling2D", "group": "middle", "bind": {"up": [116], "down": [118]}, "shape": {"input": [[15, 15, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [3467, 187], "parameters": {"main": {"size": [2, 2]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 118, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [117], "down": [119]}, "shape": {"input": [[30, 30, 32]], "output": [[30, 30, 16]]}, "task": null, "num_classes": null, "position": [3504, 135], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 119, "name": "Layer 15 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [111, 118], "down": [120]}, "shape": {"input": [[30, 30, 16], [30, 30, 16]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [3537, 81], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 120, "name": "Layer 13 (Clone)", "type": "UpSampling2D", "group": "middle", "bind": {"up": [119], "down": [121]}, "shape": {"input": [[30, 30, 32]], "output": [[60, 60, 32]]}, "task": null, "num_classes": null, "position": [3566, 27], "parameters": {"main": {"size": [2, 2]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 121, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [120], "down": [122]}, "shape": {"input": [[60, 60, 32]], "output": [[60, 60, 16]]}, "task": null, "num_classes": null, "position": [3600, -22], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 122, "name": "Layer 15 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [109, 121], "down": [123]}, "shape": {"input": [[60, 60, 16], [60, 60, 16]], "output": [[60, 60, 32]]}, "task": null, "num_classes": null, "position": [3623, -75], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 123, "name": "Layer 13 (Clone)", "type": "UpSampling2D", "group": "middle", "bind": {"up": [122], "down": [124]}, "shape": {"input": [[60, 60, 32]], "output": [[120, 120, 32]]}, "task": null, "num_classes": null, "position": [3648, -127], "parameters": {"main": {"size": [2, 2]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 124, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [123], "down": [125]}, "shape": {"input": [[120, 120, 32]], "output": [[120, 120, 16]]}, "task": null, "num_classes": null, "position": [3672, -179], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 125, "name": "Layer 15 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [107, 124], "down": [126]}, "shape": {"input": [[120, 120, 16], [120, 120, 16]], "output": [[120, 120, 32]]}, "task": null, "num_classes": null, "position": [3699, -229], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 126, "name": "Layer 3 (Clone)", "type": "CONVBlock", "group": "middle", "bind": {"up": [125], "down": [127]}, "shape": {"input": [[120, 120, 32]], "output": [[120, 120, 16]]}, "task": null, "num_classes": null, "position": [3728, -281], "parameters": {"main": {"n_conv_layers": 1, "filters": 16, "kernel_size": [3, 3], "padding": "same", "activation": null, "batch_norm_layer": true, "dropout_layer": false, "leaky_relu_layer": true}, "extra": {"strides": [1, 1], "dilation": [1, 1], "dropout_rate": 0.1, "layers_seq_config": "conv_conv_bn_lrelu_drop", "leaky_relu_alpha": 0.3}}, "reference": null}, {"id": 127, "name": "Layer 41 (Clone)", "type": "Add", "group": "middle", "bind": {"up": [106, 126], "down": [136]}, "shape": {"input": [[120, 120, 16], [120, 120, 16]], "output": [[120, 120, 16]]}, "task": null, "num_classes": null, "position": [3753, -337], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 128, "name": "Layer 72 (Clone)", "type": "UpSampling2D", "group": "middle", "bind": {"up": [105], "down": [129]}, "shape": {"input": [[60, 60, 32]], "output": [[120, 120, 32]]}, "task": null, "num_classes": null, "position": [3365, -403], "parameters": {"main": {"size": [2, 2]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 129, "name": "Layer 73 (Clone)", "type": "Concatenate", "group": "middle", "bind": {"up": [25, 128], "down": [106]}, "shape": {"input": [[120, 120, 16], [120, 120, 32]], "output": [[120, 120, 48]]}, "task": null, "num_classes": null, "position": [3367, -341], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 130, "name": "Layer 130", "type": "Conv2D", "group": "middle", "bind": {"up": [70], "down": [131]}, "shape": {"input": [[15, 15, 32]], "output": [[15, 15, 32]]}, "task": null, "num_classes": null, "position": [1868, 1711], "parameters": {"main": {"filters": 32, "kernel_size": [3, 3], "strides": [1, 1], "padding": "same", "activation": "sigmoid"}, "extra": {"data_format": "channels_last", "dilation_rate": [1, 1], "groups": 1, "use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 131, "name": "Layer 131", "type": "UpSampling2D", "group": "middle", "bind": {"up": [130], "down": [138]}, "shape": {"input": [[15, 15, 32]], "output": [[120, 120, 32]]}, "task": null, "num_classes": null, "position": [1868, 1768], "parameters": {"main": {"size": [8, 8]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 132, "name": "Layer 130 (Clone)", "type": "Conv2D", "group": "middle", "bind": {"up": [86], "down": [133]}, "shape": {"input": [[30, 30, 32]], "output": [[30, 30, 32]]}, "task": null, "num_classes": null, "position": [2453, 1155], "parameters": {"main": {"filters": 32, "kernel_size": [3, 3], "strides": [1, 1], "padding": "same", "activation": "sigmoid"}, "extra": {"data_format": "channels_last", "dilation_rate": [1, 1], "groups": 1, "use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 133, "name": "Layer 131 (Clone)", "type": "UpSampling2D", "group": "middle", "bind": {"up": [132], "down": [138]}, "shape": {"input": [[30, 30, 32]], "output": [[120, 120, 32]]}, "task": null, "num_classes": null, "position": [2453, 1214], "parameters": {"main": {"size": [4, 4]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 134, "name": "Layer 130 (Clone)", "type": "Conv2D", "group": "middle", "bind": {"up": [105], "down": [135]}, "shape": {"input": [[60, 60, 32]], "output": [[60, 60, 32]]}, "task": null, "num_classes": null, "position": [3180, 685], "parameters": {"main": {"filters": 32, "kernel_size": [3, 3], "strides": [1, 1], "padding": "same", "activation": "sigmoid"}, "extra": {"data_format": "channels_last", "dilation_rate": [1, 1], "groups": 1, "use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 135, "name": "Layer 131 (Clone)", "type": "UpSampling2D", "group": "middle", "bind": {"up": [134], "down": [138]}, "shape": {"input": [[60, 60, 32]], "output": [[120, 120, 32]]}, "task": null, "num_classes": null, "position": [3181, 747], "parameters": {"main": {"size": [2, 2]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 136, "name": "Layer 130 (Clone)", "type": "Conv2D", "group": "middle", "bind": {"up": [127], "down": [137]}, "shape": {"input": [[120, 120, 16]], "output": [[120, 120, 32]]}, "task": null, "num_classes": null, "position": [4014, -263], "parameters": {"main": {"filters": 32, "kernel_size": [3, 3], "strides": [1, 1], "padding": "same", "activation": "sigmoid"}, "extra": {"data_format": "channels_last", "dilation_rate": [1, 1], "groups": 1, "use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 137, "name": "Layer 131 (Clone)", "type": "UpSampling2D", "group": "middle", "bind": {"up": [136], "down": [138]}, "shape": {"input": [[120, 120, 32]], "output": [[120, 120, 32]]}, "task": null, "num_classes": null, "position": [4014, -201], "parameters": {"main": {"size": [1, 1]}, "extra": {"data_format": "channels_last", "interpolation": "nearest"}}, "reference": null}, {"id": 138, "name": "Layer 138", "type": "Concatenate", "group": "middle", "bind": {"up": [131, 133, 135, 137], "down": [2]}, "shape": {"input": [[120, 120, 32], [120, 120, 32], [120, 120, 32], [120, 120, 32]], "output": [[120, 120, 128]]}, "task": null, "num_classes": null, "position": [3131, 1358], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}], "keras": "from tensorflow.keras.layers import Input\nfrom terra_ai.customLayers import CONVBlock\nfrom tensorflow.keras.layers import MaxPool2D\nfrom tensorflow.keras.layers import Concatenate\nfrom tensorflow.keras.layers import UpSampling2D\nfrom tensorflow.keras.layers import Add\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.models import Model\n\ninput_1 = Input(shape=(120, 120, 3), name='1')\nx_3 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_3')(input_1)\nx_4 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_4')(x_3)\nx_5 = MaxPool2D(pool_size=[2, 2], strides=None, padding='same', data_format='channels_last', name='MaxPool2D_5')(x_4)\nx_6 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_6')(x_5)\nx_7 = MaxPool2D(pool_size=[2, 2], strides=None, padding='same', data_format='channels_last', name='MaxPool2D_7')(x_6)\nx_9 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_9')(x_7)\nx_8 = MaxPool2D(pool_size=[2, 2], strides=None, padding='same', data_format='channels_last', name='MaxPool2D_8')(x_9)\nx_10 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_10')(x_8)\nx_11 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[2, 2], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_11')(x_10)\nx_12 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_12')(x_11)\nx_15 = Concatenate(axis=-1, name='Concatenate_15')([x_10, x_12])\nx_13 = UpSampling2D(size=[2, 2], data_format='channels_last', interpolation='nearest', name='UpSampling2D_13')(x_15)\nx_14 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_14')(x_13)\nx_16 = Concatenate(axis=-1, name='Concatenate_16')([x_9, x_14])\nx_17 = UpSampling2D(size=[2, 2], data_format='channels_last', interpolation='nearest', name='UpSampling2D_17')(x_16)\nx_19 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_19')(x_17)\nx_18 = Concatenate(axis=-1, name='Concatenate_18')([x_6, x_19])\nx_20 = UpSampling2D(size=[2, 2], data_format='channels_last', interpolation='nearest', name='UpSampling2D_20')(x_18)\nx_22 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_22')(x_20)\nx_21 = Concatenate(axis=-1, name='Concatenate_21')([x_4, x_22])\nx_24 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_24')(x_21)\nx_25 = Add(name='Add_25')([x_3, x_24])\nx_42 = MaxPool2D(pool_size=[2, 2], strides=None, padding='same', data_format='channels_last', name='MaxPool2D_42')(x_25)\nx_26 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_26')(x_42)\nx_27 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_27')(x_26)\nx_28 = MaxPool2D(pool_size=[2, 2], strides=None, padding='same', data_format='channels_last', name='MaxPool2D_28')(x_27)\nx_29 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_29')(x_28)\nx_30 = MaxPool2D(pool_size=[2, 2], strides=None, padding='same', data_format='channels_last', name='MaxPool2D_30')(x_29)\nx_31 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_31')(x_30)\nx_32 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[2, 2], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_32')(x_31)\nx_33 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_33')(x_32)\nx_34 = Concatenate(axis=-1, name='Concatenate_34')([x_31, x_33])\nx_35 = UpSampling2D(size=[2, 2], data_format='channels_last', interpolation='nearest', name='UpSampling2D_35')(x_34)\nx_36 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_36')(x_35)\nx_37 = Concatenate(axis=-1, name='Concatenate_37')([x_29, x_36])\nx_38 = UpSampling2D(size=[2, 2], data_format='channels_last', interpolation='nearest', name='UpSampling2D_38')(x_37)\nx_40 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_40')(x_38)\nx_39 = Concatenate(axis=-1, name='Concatenate_39')([x_27, x_40])\nx_57 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_57')(x_39)\nx_41 = Add(name='Add_41')([x_26, x_57])\nx_43 = MaxPool2D(pool_size=[2, 2], strides=None, padding='same', data_format='channels_last', name='MaxPool2D_43')(x_41)\nx_44 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_44')(x_43)\nx_45 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_45')(x_44)\nx_46 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[2, 2], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_46')(x_45)\nx_47 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[4, 4], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_47')(x_46)\nx_48 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[8, 8], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_48')(x_47)\nx_49 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[4, 4], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_49')(x_48)\nx_50 = Concatenate(axis=-1, name='Concatenate_50')([x_47, x_49])\nx_51 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[2, 2], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_51')(x_50)\nx_52 = Concatenate(axis=-1, name='Concatenate_52')([x_46, x_51])\nx_53 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_53')(x_52)\nx_54 = Concatenate(axis=-1, name='Concatenate_54')([x_45, x_53])\nx_55 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_55')(x_54)\nx_56 = Add(name='Add_56')([x_44, x_55])\nx_71 = MaxPool2D(pool_size=[2, 2], strides=None, padding='same', data_format='channels_last', name='MaxPool2D_71')(x_56)\nx_58 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_58')(x_71)\nx_59 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_59')(x_58)\nx_60 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[2, 2], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_60')(x_59)\nx_61 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[4, 4], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_61')(x_60)\nx_62 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[8, 8], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_62')(x_61)\nx_63 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[4, 4], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_63')(x_62)\nx_64 = Concatenate(axis=-1, name='Concatenate_64')([x_61, x_63])\nx_65 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[2, 2], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_65')(x_64)\nx_66 = Concatenate(axis=-1, name='Concatenate_66')([x_60, x_65])\nx_67 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_67')(x_66)\nx_68 = Concatenate(axis=-1, name='Concatenate_68')([x_59, x_67])\nx_69 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_69')(x_68)\nx_70 = Add(name='Add_70')([x_58, x_69])\nx_72 = UpSampling2D(size=[2, 2], data_format='channels_last', interpolation='nearest', name='UpSampling2D_72')(x_70)\nx_130 = Conv2D(filters=32, kernel_size=[3, 3], strides=[1, 1], padding='same', activation='sigmoid', data_format='channels_last', dilation_rate=[1, 1], groups=1, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Conv2D_130')(x_70)\nx_73 = Concatenate(axis=-1, name='Concatenate_73')([x_56, x_72])\nx_131 = UpSampling2D(size=[8, 8], data_format='channels_last', interpolation='nearest', name='UpSampling2D_131')(x_130)\nx_74 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_74')(x_73)\nx_75 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_75')(x_74)\nx_76 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[2, 2], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_76')(x_75)\nx_77 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[4, 4], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_77')(x_76)\nx_78 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[8, 8], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_78')(x_77)\nx_79 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[4, 4], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_79')(x_78)\nx_80 = Concatenate(axis=-1, name='Concatenate_80')([x_77, x_79])\nx_81 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[2, 2], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_81')(x_80)\nx_82 = Concatenate(axis=-1, name='Concatenate_82')([x_76, x_81])\nx_83 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_83')(x_82)\nx_84 = Concatenate(axis=-1, name='Concatenate_84')([x_75, x_83])\nx_85 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_85')(x_84)\nx_86 = Add(name='Add_86')([x_74, x_85])\nx_87 = UpSampling2D(size=[2, 2], data_format='channels_last', interpolation='nearest', name='UpSampling2D_87')(x_86)\nx_132 = Conv2D(filters=32, kernel_size=[3, 3], strides=[1, 1], padding='same', activation='sigmoid', data_format='channels_last', dilation_rate=[1, 1], groups=1, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Conv2D_132')(x_86)\nx_88 = Concatenate(axis=-1, name='Concatenate_88')([x_41, x_87])\nx_133 = UpSampling2D(size=[4, 4], data_format='channels_last', interpolation='nearest', name='UpSampling2D_133')(x_132)\nx_89 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_89')(x_88)\nx_90 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_90')(x_89)\nx_91 = MaxPool2D(pool_size=[2, 2], strides=None, padding='same', data_format='channels_last', name='MaxPool2D_91')(x_90)\nx_92 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_92')(x_91)\nx_93 = MaxPool2D(pool_size=[2, 2], strides=None, padding='same', data_format='channels_last', name='MaxPool2D_93')(x_92)\nx_94 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_94')(x_93)\nx_95 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[2, 2], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_95')(x_94)\nx_96 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_96')(x_95)\nx_97 = Concatenate(axis=-1, name='Concatenate_97')([x_94, x_96])\nx_98 = UpSampling2D(size=[2, 2], data_format='channels_last', interpolation='nearest', name='UpSampling2D_98')(x_97)\nx_99 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_99')(x_98)\nx_100 = Concatenate(axis=-1, name='Concatenate_100')([x_92, x_99])\nx_101 = UpSampling2D(size=[2, 2], data_format='channels_last', interpolation='nearest', name='UpSampling2D_101')(x_100)\nx_102 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_102')(x_101)\nx_103 = Concatenate(axis=-1, name='Concatenate_103')([x_90, x_102])\nx_104 = CONVBlock(n_conv_layers=1, filters=32, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_104')(x_103)\nx_105 = Add(name='Add_105')([x_89, x_104])\nx_128 = UpSampling2D(size=[2, 2], data_format='channels_last', interpolation='nearest', name='UpSampling2D_128')(x_105)\nx_134 = Conv2D(filters=32, kernel_size=[3, 3], strides=[1, 1], padding='same', activation='sigmoid', data_format='channels_last', dilation_rate=[1, 1], groups=1, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Conv2D_134')(x_105)\nx_129 = Concatenate(axis=-1, name='Concatenate_129')([x_25, x_128])\nx_135 = UpSampling2D(size=[2, 2], data_format='channels_last', interpolation='nearest', name='UpSampling2D_135')(x_134)\nx_106 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_106')(x_129)\nx_107 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_107')(x_106)\nx_108 = MaxPool2D(pool_size=[2, 2], strides=None, padding='same', data_format='channels_last', name='MaxPool2D_108')(x_107)\nx_109 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_109')(x_108)\nx_110 = MaxPool2D(pool_size=[2, 2], strides=None, padding='same', data_format='channels_last', name='MaxPool2D_110')(x_109)\nx_111 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_111')(x_110)\nx_112 = MaxPool2D(pool_size=[2, 2], strides=None, padding='same', data_format='channels_last', name='MaxPool2D_112')(x_111)\nx_113 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_113')(x_112)\nx_114 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[2, 2], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_114')(x_113)\nx_115 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_115')(x_114)\nx_116 = Concatenate(axis=-1, name='Concatenate_116')([x_113, x_115])\nx_117 = UpSampling2D(size=[2, 2], data_format='channels_last', interpolation='nearest', name='UpSampling2D_117')(x_116)\nx_118 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_118')(x_117)\nx_119 = Concatenate(axis=-1, name='Concatenate_119')([x_111, x_118])\nx_120 = UpSampling2D(size=[2, 2], data_format='channels_last', interpolation='nearest', name='UpSampling2D_120')(x_119)\nx_121 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_121')(x_120)\nx_122 = Concatenate(axis=-1, name='Concatenate_122')([x_109, x_121])\nx_123 = UpSampling2D(size=[2, 2], data_format='channels_last', interpolation='nearest', name='UpSampling2D_123')(x_122)\nx_124 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_124')(x_123)\nx_125 = Concatenate(axis=-1, name='Concatenate_125')([x_107, x_124])\nx_126 = CONVBlock(n_conv_layers=1, filters=16, kernel_size=[3, 3], padding='same', activation=None, batch_norm_layer=True, dropout_layer=False, leaky_relu_layer=True, strides=[1, 1], dilation=[1, 1], dropout_rate=0.1, layers_seq_config='conv_conv_bn_lrelu_drop', leaky_relu_alpha=0.3, name='CONVBlock_126')(x_125)\nx_127 = Add(name='Add_127')([x_106, x_126])\nx_136 = Conv2D(filters=32, kernel_size=[3, 3], strides=[1, 1], padding='same', activation='sigmoid', data_format='channels_last', dilation_rate=[1, 1], groups=1, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Conv2D_136')(x_127)\nx_137 = UpSampling2D(size=[1, 1], data_format='channels_last', interpolation='nearest', name='UpSampling2D_137')(x_136)\nx_138 = Concatenate(axis=-1, name='Concatenate_138')([x_131, x_133, x_135, x_137])\noutput_2 = Conv2D(filters=32, kernel_size=[3, 3], strides=[1, 1], padding='same', activation='sigmoid', data_format='channels_last', dilation_rate=[1, 1], groups=1, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='2')(x_138)\n\nmodel = Model([input_1], [output_2])", "references": [], "input_shape": "[(120, 120, 3)]"}