{"alias": "klassifikatsija_video_conv3d_bolshaja", "name": "\u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0432\u0438\u0434\u0435\u043e Conv3d \u0431\u043e\u043b\u044c\u0448\u0430\u044f", "image": "", "layers": [{"id": 1, "name": "\u0412\u0445\u043e\u0434 1", "type": "Input", "group": "input", "bind": {"up": [null], "down": [9]}, "shape": {"input": [[70, 80, 110, 3]], "output": [[70, 80, 110, 3]]}, "task": null, "num_classes": null, "position": [0, -327], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 2, "name": "\u0412\u044b\u0445\u043e\u0434  1", "type": "Dense", "group": "output", "bind": {"up": [11], "down": []}, "shape": {"input": [[1024]], "output": [[3]]}, "task": null, "num_classes": null, "position": [-1, 415], "parameters": {"main": {"units": 3, "activation": "softmax"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 3, "name": "Layer 4", "type": "Conv3D", "group": "middle", "bind": {"up": [10], "down": [4]}, "shape": {"input": [[35, 40, 55, 32]], "output": [[35, 40, 55, 64]]}, "task": null, "num_classes": null, "position": [0, -119], "parameters": {"main": {"filters": 64, "kernel_size": [3, 3, 3], "strides": [1, 1, 1], "padding": "same", "activation": "relu"}, "extra": {"data_format": "channels_last", "dilation_rate": [1, 1, 1], "groups": 1, "use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 4, "name": "Layer 5", "type": "MaxPool3D", "group": "middle", "bind": {"up": [3], "down": [7]}, "shape": {"input": [[35, 40, 55, 64]], "output": [[18, 20, 28, 64]]}, "task": null, "num_classes": null, "position": [0, -45], "parameters": {"main": {"pool_size": [2, 2, 2], "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 5, "name": "Layer 8", "type": "Flatten", "group": "middle", "bind": {"up": [8], "down": [6]}, "shape": {"input": [[9, 10, 14, 128]], "output": [[161280]]}, "task": null, "num_classes": null, "position": [0, 182], "parameters": {"main": {}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 6, "name": "Layer 9", "type": "Dense", "group": "middle", "bind": {"up": [5], "down": [11]}, "shape": {"input": [[161280]], "output": [[1024]]}, "task": null, "num_classes": null, "position": [0, 260], "parameters": {"main": {"units": 1024, "activation": "tanh"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 7, "name": "Layer 6", "type": "Conv3D", "group": "middle", "bind": {"up": [4], "down": [8]}, "shape": {"input": [[18, 20, 28, 64]], "output": [[18, 20, 28, 128]]}, "task": null, "num_classes": null, "position": [0, 28], "parameters": {"main": {"filters": 128, "kernel_size": [3, 3, 3], "strides": [1, 1, 1], "padding": "same", "activation": "relu"}, "extra": {"data_format": "channels_last", "dilation_rate": [1, 1, 1], "groups": 1, "use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 8, "name": "Layer 7", "type": "MaxPool3D", "group": "middle", "bind": {"up": [7], "down": [5]}, "shape": {"input": [[18, 20, 28, 128]], "output": [[9, 10, 14, 128]]}, "task": null, "num_classes": null, "position": [0, 104], "parameters": {"main": {"pool_size": [2, 2, 2], "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 9, "name": "Layer 2", "type": "Conv3D", "group": "middle", "bind": {"up": [1], "down": [10]}, "shape": {"input": [[70, 80, 110, 3]], "output": [[70, 80, 110, 32]]}, "task": null, "num_classes": null, "position": [0, -256], "parameters": {"main": {"filters": 32, "kernel_size": [3, 3, 3], "strides": [1, 1, 1], "padding": "same", "activation": "relu"}, "extra": {"data_format": "channels_last", "dilation_rate": [1, 1, 1], "groups": 1, "use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 10, "name": "Layer 3", "type": "MaxPool3D", "group": "middle", "bind": {"up": [9], "down": [3]}, "shape": {"input": [[70, 80, 110, 32]], "output": [[35, 40, 55, 32]]}, "task": null, "num_classes": null, "position": [0, -188], "parameters": {"main": {"pool_size": [2, 2, 2], "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 11, "name": "Layer 10", "type": "Dense", "group": "middle", "bind": {"up": [6], "down": [2]}, "shape": {"input": [[1024]], "output": [[1024]]}, "task": null, "num_classes": null, "position": [-1, 337], "parameters": {"main": {"units": 1024, "activation": "relu"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}], "keras": "from tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import Conv3D\nfrom tensorflow.keras.layers import MaxPool3D\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Model\n\ninput_1 = Input(shape=(70, 80, 110, 3), name='1')\nx_9 = Conv3D(filters=32, kernel_size=[3, 3, 3], strides=[1, 1, 1], padding='same', activation='relu', data_format='channels_last', dilation_rate=[1, 1, 1], groups=1, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Conv3D_9')(input_1)\nx_10 = MaxPool3D(pool_size=[2, 2, 2], strides=None, padding='same', data_format='channels_last', name='MaxPool3D_10')(x_9)\nx_3 = Conv3D(filters=64, kernel_size=[3, 3, 3], strides=[1, 1, 1], padding='same', activation='relu', data_format='channels_last', dilation_rate=[1, 1, 1], groups=1, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Conv3D_3')(x_10)\nx_4 = MaxPool3D(pool_size=[2, 2, 2], strides=None, padding='same', data_format='channels_last', name='MaxPool3D_4')(x_3)\nx_7 = Conv3D(filters=128, kernel_size=[3, 3, 3], strides=[1, 1, 1], padding='same', activation='relu', data_format='channels_last', dilation_rate=[1, 1, 1], groups=1, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Conv3D_7')(x_4)\nx_8 = MaxPool3D(pool_size=[2, 2, 2], strides=None, padding='same', data_format='channels_last', name='MaxPool3D_8')(x_7)\nx_5 = Flatten(data_format='channels_last', name='Flatten_5')(x_8)\nx_6 = Dense(units=1024, activation='tanh', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Dense_6')(x_5)\nx_11 = Dense(units=1024, activation='relu', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Dense_11')(x_6)\noutput_2 = Dense(units=3, activation='softmax', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='2')(x_11)\n\nmodel = Model([input_1], [output_2])", "references": [], "input_shape": "[(70, 80, 110, 3)]"}