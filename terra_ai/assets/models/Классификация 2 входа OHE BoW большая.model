{"alias": "class_apartments_heavy", "name": "class. Apartments Heavy", "image": "", "layers": [{"id": 1, "name": "\u0412\u0445\u043e\u0434 1", "type": "Input", "group": "input", "bind": {"up": [null], "down": [4]}, "shape": {"input": [[1010]], "output": [[1010]]}, "task": null, "num_classes": null, "position": [-102, -312], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 2, "name": "\u0412\u0445\u043e\u0434 2", "type": "Input", "group": "input", "bind": {"up": [null], "down": [5]}, "shape": {"input": [[5000]], "output": [[5000]]}, "task": null, "num_classes": null, "position": [99, -313], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 3, "name": "\u0412\u044b\u0445\u043e\u0434  3", "type": "Dense", "group": "output", "bind": {"up": [12], "down": []}, "shape": {"input": [[1024]], "output": [[5]]}, "task": null, "num_classes": null, "position": [1, 357], "parameters": {"main": {"units": 5, "activation": "softmax"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 4, "name": "Layer 3", "type": "Dense", "group": "middle", "bind": {"up": [1], "down": [8]}, "shape": {"input": [[1010]], "output": [[1024]]}, "task": null, "num_classes": null, "position": [-102, -234], "parameters": {"main": {"units": 1024, "activation": "linear"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 5, "name": "Layer 4", "type": "Dense", "group": "middle", "bind": {"up": [2], "down": [9]}, "shape": {"input": [[5000]], "output": [[1024]]}, "task": null, "num_classes": null, "position": [99, -235], "parameters": {"main": {"units": 1024, "activation": "linear"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 6, "name": "Layer 13", "type": "Concatenate", "group": "middle", "bind": {"up": [15, 16], "down": [7]}, "shape": {"input": [[1024], [1024]], "output": [[2048]]}, "task": null, "num_classes": null, "position": [2, 148], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 7, "name": "Layer 14", "type": "Dense", "group": "middle", "bind": {"up": [6], "down": [12]}, "shape": {"input": [[2048]], "output": [[1024]]}, "task": null, "num_classes": null, "position": [2, 219], "parameters": {"main": {"units": 1024, "activation": "relu"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 8, "name": "Layer 5", "type": "BatchNormalization", "group": "middle", "bind": {"up": [4], "down": [10]}, "shape": {"input": [[1024]], "output": [[1024]]}, "task": null, "num_classes": null, "position": [-104, -167], "parameters": {"main": {}, "extra": {"axis": -1, "momentum": 0.99, "epsilon": 0.001, "center": true, "scale": true, "beta_initializer": "zeros", "gamma_initializer": "ones", "moving_mean_initializer": "zeros", "moving_variance_initializer": "ones", "beta_regularizer": null, "gamma_regularizer": null, "beta_constraint": null, "gamma_constraint": null}}, "reference": null}, {"id": 9, "name": "Layer 6", "type": "BatchNormalization", "group": "middle", "bind": {"up": [5], "down": [11]}, "shape": {"input": [[1024]], "output": [[1024]]}, "task": null, "num_classes": null, "position": [99, -167], "parameters": {"main": {}, "extra": {"axis": -1, "momentum": 0.99, "epsilon": 0.001, "center": true, "scale": true, "beta_initializer": "zeros", "gamma_initializer": "ones", "moving_mean_initializer": "zeros", "moving_variance_initializer": "ones", "beta_regularizer": null, "gamma_regularizer": null, "beta_constraint": null, "gamma_constraint": null}}, "reference": null}, {"id": 10, "name": "Layer 7", "type": "Dropout", "group": "middle", "bind": {"up": [8], "down": [13]}, "shape": {"input": [[1024]], "output": [[1024]]}, "task": null, "num_classes": null, "position": [-104, -96], "parameters": {"main": {"rate": 0.1}, "extra": {"noise_shape": null, "seed": null}}, "reference": null}, {"id": 11, "name": "Layer 8", "type": "Dropout", "group": "middle", "bind": {"up": [9], "down": [14]}, "shape": {"input": [[1024]], "output": [[1024]]}, "task": null, "num_classes": null, "position": [99, -95], "parameters": {"main": {"rate": 0.1}, "extra": {"noise_shape": null, "seed": null}}, "reference": null}, {"id": 12, "name": "Layer 15", "type": "BatchNormalization", "group": "middle", "bind": {"up": [7], "down": [3]}, "shape": {"input": [[1024]], "output": [[1024]]}, "task": null, "num_classes": null, "position": [2, 289], "parameters": {"main": {}, "extra": {"axis": -1, "momentum": 0.99, "epsilon": 0.001, "center": true, "scale": true, "beta_initializer": "zeros", "gamma_initializer": "ones", "moving_mean_initializer": "zeros", "moving_variance_initializer": "ones", "beta_regularizer": null, "gamma_regularizer": null, "beta_constraint": null, "gamma_constraint": null}}, "reference": null}, {"id": 13, "name": "Layer 9", "type": "Dense", "group": "middle", "bind": {"up": [10], "down": [15]}, "shape": {"input": [[1024]], "output": [[1024]]}, "task": null, "num_classes": null, "position": [-105, -23], "parameters": {"main": {"units": 1024, "activation": "sigmoid"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 14, "name": "Layer 10", "type": "Dense", "group": "middle", "bind": {"up": [11], "down": [16]}, "shape": {"input": [[1024]], "output": [[1024]]}, "task": null, "num_classes": null, "position": [98, -22], "parameters": {"main": {"units": 1024, "activation": "elu"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 15, "name": "Layer 11", "type": "BatchNormalization", "group": "middle", "bind": {"up": [13], "down": [6]}, "shape": {"input": [[1024]], "output": [[1024]]}, "task": null, "num_classes": null, "position": [-106, 51], "parameters": {"main": {}, "extra": {"axis": -1, "momentum": 0.99, "epsilon": 0.001, "center": true, "scale": true, "beta_initializer": "zeros", "gamma_initializer": "ones", "moving_mean_initializer": "zeros", "moving_variance_initializer": "ones", "beta_regularizer": null, "gamma_regularizer": null, "beta_constraint": null, "gamma_constraint": null}}, "reference": null}, {"id": 16, "name": "Layer 12", "type": "BatchNormalization", "group": "middle", "bind": {"up": [14], "down": [6]}, "shape": {"input": [[1024]], "output": [[1024]]}, "task": null, "num_classes": null, "position": [97, 51], "parameters": {"main": {}, "extra": {"axis": -1, "momentum": 0.99, "epsilon": 0.001, "center": true, "scale": true, "beta_initializer": "zeros", "gamma_initializer": "ones", "moving_mean_initializer": "zeros", "moving_variance_initializer": "ones", "beta_regularizer": null, "gamma_regularizer": null, "beta_constraint": null, "gamma_constraint": null}}, "reference": null}], "keras": "from tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import BatchNormalization\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Concatenate\nfrom tensorflow.keras.models import Model\n\ninput_1 = Input(shape=(1010,), name='1')\ninput_2 = Input(shape=(5000,), name='2')\nx_4 = Dense(units=1024, activation='linear', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Dense_4')(input_1)\nx_5 = Dense(units=1024, activation='linear', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Dense_5')(input_2)\nx_8 = BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True, beta_initializer='zeros', gamma_initializer='ones', moving_mean_initializer='zeros', moving_variance_initializer='ones', beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None, name='BatchNormalization_8')(x_4)\nx_9 = BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True, beta_initializer='zeros', gamma_initializer='ones', moving_mean_initializer='zeros', moving_variance_initializer='ones', beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None, name='BatchNormalization_9')(x_5)\nx_10 = Dropout(rate=0.1, noise_shape=None, seed=None, name='Dropout_10')(x_8)\nx_11 = Dropout(rate=0.1, noise_shape=None, seed=None, name='Dropout_11')(x_9)\nx_13 = Dense(units=1024, activation='sigmoid', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Dense_13')(x_10)\nx_14 = Dense(units=1024, activation='elu', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Dense_14')(x_11)\nx_15 = BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True, beta_initializer='zeros', gamma_initializer='ones', moving_mean_initializer='zeros', moving_variance_initializer='ones', beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None, name='BatchNormalization_15')(x_13)\nx_16 = BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True, beta_initializer='zeros', gamma_initializer='ones', moving_mean_initializer='zeros', moving_variance_initializer='ones', beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None, name='BatchNormalization_16')(x_14)\nx_6 = Concatenate(axis=-1, name='Concatenate_6')([x_15, x_16])\nx_7 = Dense(units=1024, activation='relu', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Dense_7')(x_6)\nx_12 = BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True, beta_initializer='zeros', gamma_initializer='ones', moving_mean_initializer='zeros', moving_variance_initializer='ones', beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None, name='BatchNormalization_12')(x_7)\noutput_3 = Dense(units=5, activation='softmax', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='3')(x_12)\n\nmodel = Model([input_1, input_2], [output_3])", "references": [], "input_shape": "[(1010,), (5000,)]"}