{"alias": "klassifikatsija_teksta_dense_bow_malaja", "name": "\u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 Dense BoW \u043c\u0430\u043b\u0430\u044f", "image": "", "layers": [{"id": 1, "name": "\u0412\u0445\u043e\u0434 1", "type": "Input", "group": "input", "bind": {"up": [null], "down": [9]}, "shape": {"input": [[2000]], "output": [[2000]]}, "task": "Text", "num_classes": 10, "position": [0, -42], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 2, "name": "\u0412\u044b\u0445\u043e\u0434  2", "type": "Dense", "group": "output", "bind": {"up": [10], "down": []}, "shape": {"input": [[200]], "output": [[10]]}, "task": "Classification", "num_classes": 10, "position": [-1, 175], "parameters": {"main": {"units": 10, "activation": "softmax"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 9, "name": "Layer 6", "type": "Dense", "group": "middle", "bind": {"up": [1], "down": [10]}, "shape": {"input": [[2000]], "output": [[200]]}, "task": null, "num_classes": null, "position": [-1, 34], "parameters": {"main": {"units": 200, "activation": "relu"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 10, "name": "Layer 7", "type": "Dropout", "group": "middle", "bind": {"up": [9], "down": [2]}, "shape": {"input": [[200]], "output": [[200]]}, "task": null, "num_classes": null, "position": [-1, 104], "parameters": {"main": {"rate": 0.2}, "extra": {"noise_shape": null, "seed": null}}, "reference": null}], "keras": "from tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.models import Model\n\ninput_1 = Input(shape=(2000,), name='1')\nx_9 = Dense(units=200, activation='relu', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Dense_9')(input_1)\nx_10 = Dropout(rate=0.2, noise_shape=None, seed=None, name='Dropout_10')(x_9)\noutput_2 = Dense(units=10, activation='softmax', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='2')(x_10)\n\nmodel = Model([input_1], [output_2])", "references": [], "input_shape": "[(2000,)]"}