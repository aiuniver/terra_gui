{"alias": "class_apartments_medium", "name": "class. Apartments Medium", "image": "", "layers": [{"id": 1, "name": "\u0412\u0445\u043e\u0434 1", "type": "Input", "group": "input", "bind": {"up": [null], "down": [4]}, "shape": {"input": [[1010]], "output": [[1010]]}, "task": null, "num_classes": null, "position": [-99, -141], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 2, "name": "\u0412\u0445\u043e\u0434 2", "type": "Input", "group": "input", "bind": {"up": [null], "down": [5]}, "shape": {"input": [[5000]], "output": [[5000]]}, "task": null, "num_classes": null, "position": [98, -140], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 3, "name": "\u0412\u044b\u0445\u043e\u0434  3", "type": "Dense", "group": "output", "bind": {"up": [12], "down": []}, "shape": {"input": [[256]], "output": [[5]]}, "task": null, "num_classes": null, "position": [3, 359], "parameters": {"main": {"units": 5, "activation": "softmax"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 4, "name": "Layer 3", "type": "Dense", "group": "middle", "bind": {"up": [1], "down": [8]}, "shape": {"input": [[1010]], "output": [[512]]}, "task": null, "num_classes": null, "position": [-100, -70], "parameters": {"main": {"units": 512, "activation": "relu"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 5, "name": "Layer 4", "type": "Dense", "group": "middle", "bind": {"up": [2], "down": [9]}, "shape": {"input": [[5000]], "output": [[512]]}, "task": null, "num_classes": null, "position": [98, -69], "parameters": {"main": {"units": 512, "activation": "relu"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 6, "name": "Layer 9", "type": "Concatenate", "group": "middle", "bind": {"up": [10, 11], "down": [7]}, "shape": {"input": [[512], [512]], "output": [[1024]]}, "task": null, "num_classes": null, "position": [2, 148], "parameters": {"main": {}, "extra": {"axis": -1}}, "reference": null}, {"id": 7, "name": "Layer 10", "type": "Dense", "group": "middle", "bind": {"up": [6], "down": [12]}, "shape": {"input": [[1024]], "output": [[256]]}, "task": null, "num_classes": null, "position": [3, 220], "parameters": {"main": {"units": 256, "activation": "relu"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 8, "name": "Layer 5", "type": "BatchNormalization", "group": "middle", "bind": {"up": [4], "down": [10]}, "shape": {"input": [[512]], "output": [[512]]}, "task": null, "num_classes": null, "position": [-99, 5], "parameters": {"main": {}, "extra": {"axis": -1, "momentum": 0.99, "epsilon": 0.001, "center": true, "scale": true, "beta_initializer": "zeros", "gamma_initializer": "ones", "moving_mean_initializer": "zeros", "moving_variance_initializer": "ones", "beta_regularizer": null, "gamma_regularizer": null, "beta_constraint": null, "gamma_constraint": null}}, "reference": null}, {"id": 9, "name": "Layer 6", "type": "BatchNormalization", "group": "middle", "bind": {"up": [5], "down": [11]}, "shape": {"input": [[512]], "output": [[512]]}, "task": null, "num_classes": null, "position": [98, 6], "parameters": {"main": {}, "extra": {"axis": -1, "momentum": 0.99, "epsilon": 0.001, "center": true, "scale": true, "beta_initializer": "zeros", "gamma_initializer": "ones", "moving_mean_initializer": "zeros", "moving_variance_initializer": "ones", "beta_regularizer": null, "gamma_regularizer": null, "beta_constraint": null, "gamma_constraint": null}}, "reference": null}, {"id": 10, "name": "Layer 7", "type": "Dropout", "group": "middle", "bind": {"up": [8], "down": [6]}, "shape": {"input": [[512]], "output": [[512]]}, "task": null, "num_classes": null, "position": [-100, 75], "parameters": {"main": {"rate": 0.1}, "extra": {"noise_shape": null, "seed": null}}, "reference": null}, {"id": 11, "name": "Layer 8", "type": "Dropout", "group": "middle", "bind": {"up": [9], "down": [6]}, "shape": {"input": [[512]], "output": [[512]]}, "task": null, "num_classes": null, "position": [99, 75], "parameters": {"main": {"rate": 0.1}, "extra": {"noise_shape": null, "seed": null}}, "reference": null}, {"id": 12, "name": "Layer 11", "type": "BatchNormalization", "group": "middle", "bind": {"up": [7], "down": [3]}, "shape": {"input": [[256]], "output": [[256]]}, "task": null, "num_classes": null, "position": [2, 289], "parameters": {"main": {}, "extra": {"axis": -1, "momentum": 0.99, "epsilon": 0.001, "center": true, "scale": true, "beta_initializer": "zeros", "gamma_initializer": "ones", "moving_mean_initializer": "zeros", "moving_variance_initializer": "ones", "beta_regularizer": null, "gamma_regularizer": null, "beta_constraint": null, "gamma_constraint": null}}, "reference": null}], "keras": "from tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import BatchNormalization\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Concatenate\nfrom tensorflow.keras.models import Model\n\ninput_1 = Input(shape=(1010,), name='1')\ninput_2 = Input(shape=(5000,), name='2')\nx_4 = Dense(units=512, activation='relu', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Dense_4')(input_1)\nx_5 = Dense(units=512, activation='relu', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Dense_5')(input_2)\nx_8 = BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True, beta_initializer='zeros', gamma_initializer='ones', moving_mean_initializer='zeros', moving_variance_initializer='ones', beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None, name='BatchNormalization_8')(x_4)\nx_9 = BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True, beta_initializer='zeros', gamma_initializer='ones', moving_mean_initializer='zeros', moving_variance_initializer='ones', beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None, name='BatchNormalization_9')(x_5)\nx_10 = Dropout(rate=0.1, noise_shape=None, seed=None, name='Dropout_10')(x_8)\nx_11 = Dropout(rate=0.1, noise_shape=None, seed=None, name='Dropout_11')(x_9)\nx_6 = Concatenate(axis=-1, name='Concatenate_6')([x_10, x_11])\nx_7 = Dense(units=256, activation='relu', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Dense_7')(x_6)\nx_12 = BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True, beta_initializer='zeros', gamma_initializer='ones', moving_mean_initializer='zeros', moving_variance_initializer='ones', beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None, name='BatchNormalization_12')(x_7)\noutput_3 = Dense(units=5, activation='softmax', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='3')(x_12)\n\nmodel = Model([input_1, input_2], [output_3])", "references": [], "input_shape": "[(1010,), (5000,)]"}