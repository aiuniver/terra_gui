{"alias": "tseries_trejding_medium", "name": "tSeries. \u0422\u0440\u0435\u0439\u0434\u0438\u043d\u0433 Medium", "image": "", "layers": [{"id": 1, "name": "Input 1", "type": "Input", "group": "input", "bind": {"up": [null], "down": [6]}, "shape": {"input": [[4, 30]], "output": [[4, 30]]}, "task": "Dataframe", "num_classes": null, "position": [-89, -197], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 2, "name": "Output 1", "type": "Dense", "group": "output", "bind": {"up": [5], "down": []}, "shape": {"input": [[1000]], "output": [[1]]}, "task": "Timeseries", "num_classes": 3, "position": [-91, 199], "parameters": {"main": {"units": 1, "activation": "relu"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 3, "name": "Layer 2", "type": "Conv1D", "group": "middle", "bind": {"up": [6], "down": [4]}, "shape": {"input": [[4, 1000]], "output": [[4, 128]]}, "task": null, "num_classes": null, "position": [-89, -44], "parameters": {"main": {"filters": 128, "kernel_size": 5, "strides": 1, "padding": "same", "activation": "tanh"}, "extra": {"data_format": "channels_last", "dilation_rate": 1, "groups": 1, "use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 4, "name": "Layer 3", "type": "Flatten", "group": "middle", "bind": {"up": [3], "down": [5]}, "shape": {"input": [[4, 128]], "output": [[512]]}, "task": null, "num_classes": null, "position": [-90, 35], "parameters": {"main": {}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 5, "name": "Layer 4", "type": "Dense", "group": "middle", "bind": {"up": [4], "down": [2]}, "shape": {"input": [[512]], "output": [[1000]]}, "task": null, "num_classes": null, "position": [-91, 114], "parameters": {"main": {"units": 1000, "activation": "relu"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 6, "name": "Layer 1", "type": "Dense", "group": "middle", "bind": {"up": [1], "down": [3]}, "shape": {"input": [[4, 30]], "output": [[4, 1000]]}, "task": null, "num_classes": null, "position": [-89, -121], "parameters": {"main": {"units": 1000, "activation": "elu"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}], "keras": "from tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Conv1D\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.models import Model\n\ninput_1 = Input(shape=(4, 30), name='1')\nx_6 = Dense(units=1000, activation='elu', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Dense_6')(input_1)\nx_3 = Conv1D(filters=128, kernel_size=5, strides=1, padding='same', activation='tanh', data_format='channels_last', dilation_rate=1, groups=1, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Conv1D_3')(x_6)\nx_4 = Flatten(data_format='channels_last', name='Flatten_4')(x_3)\nx_5 = Dense(units=1000, activation='relu', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Dense_5')(x_4)\noutput_2 = Dense(units=1, activation='relu', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='2')(x_5)\n\nmodel = Model([input_1], [output_2])", "references": [], "input_shape": "[(4, 30)]"}