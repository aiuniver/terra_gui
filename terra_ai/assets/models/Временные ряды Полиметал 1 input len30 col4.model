{"alias": "vremennye_rjady_1_input_len30_col4", "name": "\u0412\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0440\u044f\u0434\u044b 1 input len30 col4", "image": "", "layers": [{"id": 1, "name": "\u0412\u0445\u043e\u0434 1", "type": "Input", "group": "input", "bind": {"up": [null], "down": [3]}, "shape": {"input": [[30, 4]], "output": [[30, 4]]}, "task": "Dataframe", "num_classes": null, "position": [-90, -144], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 2, "name": "\u0412\u044b\u0445\u043e\u0434 2", "type": "Dense", "group": "output", "bind": {"up": [4], "down": []}, "shape": {"input": [[5, 32]], "output": [[5, 2]]}, "task": "Timeseries", "num_classes": 2, "position": [-92, 82], "parameters": {"main": {"units": 2, "activation": "sigmoid"}, "extra": {"use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 3, "name": "Layer 3", "type": "Conv1D", "group": "middle", "bind": {"up": [1], "down": [4]}, "shape": {"input": [[30, 4]], "output": [[15, 32]]}, "task": null, "num_classes": null, "position": [-90, -71], "parameters": {"main": {"filters": 32, "kernel_size": 5, "strides": 2, "padding": "same", "activation": "relu"}, "extra": {"data_format": "channels_last", "dilation_rate": 1, "groups": 1, "use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 4, "name": "Layer 4", "type": "Conv1D", "group": "middle", "bind": {"up": [3], "down": [2]}, "shape": {"input": [[15, 32]], "output": [[5, 32]]}, "task": null, "num_classes": null, "position": [-91, 6], "parameters": {"main": {"filters": 32, "kernel_size": 5, "strides": 3, "padding": "same", "activation": "relu"}, "extra": {"data_format": "channels_last", "dilation_rate": 1, "groups": 1, "use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}], "keras": "from tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import Conv1D\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Model\n\ninput_1 = Input(shape=(30, 4), name='1')\nx_3 = Conv1D(filters=32, kernel_size=5, strides=2, padding='same', activation='relu', data_format='channels_last', dilation_rate=1, groups=1, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Conv1D_3')(input_1)\nx_4 = Conv1D(filters=32, kernel_size=5, strides=3, padding='same', activation='relu', data_format='channels_last', dilation_rate=1, groups=1, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Conv1D_4')(x_3)\noutput_2 = Dense(units=2, activation='linear', use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='2')(x_4)\n\nmodel = Model([input_1], [output_2])", "references": [], "input_shape": "[(30, 4)]"}