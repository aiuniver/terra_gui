{"alias": "tseries_sber_light", "name": "tSeries. Sber Light", "image": "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", "layers": [{"id": 1, "name": "\u0412\u0445\u043e\u0434 1", "type": "Input", "group": "input", "bind": {"up": [null], "down": [5]}, "shape": {"input": [[4, 30]], "output": [[4, 30]]}, "task": null, "num_classes": null, "position": [-85, -166], "parameters": {"main": {}, "extra": {}}, "reference": null}, {"id": 3, "name": "\u0412\u044b\u0445\u043e\u0434  1", "type": "Conv1D", "group": "output", "bind": {"up": [4], "down": []}, "shape": {"input": [[2, 32]], "output": [[2, 2]]}, "task": null, "num_classes": null, "position": [-85, 54], "parameters": {"main": {"filters": 2, "kernel_size": 1, "strides": 1, "padding": "same", "activation": "linear"}, "extra": {"data_format": "channels_last", "dilation_rate": 1, "groups": 1, "use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}, {"id": 4, "name": "Layer 3", "type": "MaxPool1D", "group": "middle", "bind": {"up": [5], "down": [3]}, "shape": {"input": [[4, 32]], "output": [[2, 32]]}, "task": null, "num_classes": null, "position": [-85, -21], "parameters": {"main": {"pool_size": 2, "strides": null, "padding": "same"}, "extra": {"data_format": "channels_last"}}, "reference": null}, {"id": 5, "name": "Layer 2", "type": "Conv1D", "group": "middle", "bind": {"up": [1], "down": [4]}, "shape": {"input": [[4, 30]], "output": [[4, 32]]}, "task": null, "num_classes": null, "position": [-85, -95], "parameters": {"main": {"filters": 32, "kernel_size": 5, "strides": 1, "padding": "same", "activation": "relu"}, "extra": {"data_format": "channels_last", "dilation_rate": 1, "groups": 1, "use_bias": true, "kernel_initializer": "glorot_uniform", "bias_initializer": "zeros", "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}}, "reference": null}], "keras": "from tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import Conv1D\nfrom tensorflow.keras.layers import MaxPool1D\nfrom tensorflow.keras.models import Model\n\ninput_1 = Input(shape=(4, 30), name='1')\nx_5 = Conv1D(filters=32, kernel_size=5, strides=1, padding='same', activation='relu', data_format='channels_last', dilation_rate=1, groups=1, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='Conv1D_5')(input_1)\nx_4 = MaxPool1D(pool_size=2, strides=None, padding='same', data_format='channels_last', name='MaxPool1D_4')(x_5)\noutput_3 = Conv1D(filters=2, kernel_size=1, strides=1, padding='same', activation='linear', data_format='channels_last', dilation_rate=1, groups=1, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, name='3')(x_4)\n\nmodel = Model([input_1], [output_3])", "references": [], "input_shape": "[(4, 30)]"}